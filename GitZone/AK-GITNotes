------------------------------------------------------------------------------------------------------------------
June 27, 2019
------------------------------------------------------------------------------------------------------------------

working tree - (git add, git clean -fd .) - stagging/indexing area - (git commit) - local repo - (push/pull) - remote repo -  - stash

yum install git

git init
.get is created... git remembers everything memory of git this is your repository...

git help
git add
git commit -m "comments to localrepo"
git status
git log --decorate --oneline --graph

------------------------------------------------------------------------------------------------------------------
June 29, 2019
------------------------------------------------------------------------------------------------------------------

** git-clean - Remove untracked files from the working tree
** if you want to remove all the files which is not commited to repository use: / untracked files from git..

git clean -fd . 
git clean -f filename

** use "git checkout -- <file>..." to discard changes in working directory

git checkout -- file 

** for only reverting from staging area to working tree.
git reset HEAD file7

** git reset --hard #Any changes to tracked files in the working tree since <commit> are discarded and new files in staging will be removed from staging and working tree but it will not take any action on untracked files.

git reset --hard

https://github.com/

git clone https://github.com/ksphub/KSPDocs.git
cd KSPDocs/GitZone
vi AK-GITNotes
git add AK-GITNotes
git commit -m "Git Notes as on June 29 2019"
git push origin master
Username for 'https://github.com': sivaprasad.kammara@gmail.com
Password for 'https://sivaprasad.kammara@gmail.com@github.com':

------------------------------------------------------------------------------------------------------------------
July 07, 2019
------------------------------------------------------------------------------------------------------------------

git remote add origin https://github.com/ksphub/KSPDocs.git
create file push...
git push origin master
git pull origin master ; provide comments and save and exit or default... save exit...
git push origin master

git clone https://github.com/ksphub/centralrepo.git
cd centralrepo
create file push...
git push origin master


git remote add vs git clone?

git remote add just creates an entry in your git config that specifies a name for a particular URL. You must have an existing git repo to use this. 
git clone creates a new git repository by copying an existing one located at the URI you specify.

------------------------------------------------------------------------------------------------------------------
July 11, 2019
------------------------------------------------------------------------------------------------------------------

Jenkins and Git overview

branch is a help you parell stream of developing.. branch is nothing but link to latest commit id..

https://www.atlassian.com/git/tutorials/using-branches

/root/soft/gittest/gitbranch

------------------------------------------------------------------------------------------------------------------
Aut 07, 2019
------------------------------------------------------------------------------------------------------------------

touch f1 f2; git add f1 f2 
git commit -m "3rd commit" f2
git log -- show local repo commit ids
git show commitid 40/7 characters -- show what modified in commit

git log -2 --show latest 2 commit ids -n
git log --oneline
git log --oneline -2
git log --author=authorname
git log --since=yy-mm-dd
git log --until=yy-mm-dd
git log --oneline --decorate ; useful in multiple branches

git reset --soft lastcommitid-1 (copy file from local repo to staging/index area)
git reset HEAD filename (unstage)
git reset --mixed lastcommitid-1 (copy file from local repo directly to workspace)

commited files:
 (use "git add/rm <file>..." to update what will be committed)
 (use "git checkout -- <file>..." to discard changes in working directory)


------------------------------------------------------------------------------------------------------------------

Aug 08, 2019

list branch:
git branch 

create branch:
git branch develop

switch to branch:
git checkout develop

create and switch:
git checkout -b develop2

rename branch:
git branch -m  develop develop2

replace branch:
git branch -M test develop2


delete branch:
git branch -d hotfixes
git branch -D hotfixes

git log --decorate --oneline --graph

to merge develop to master (fast-farward - without conflicts;  developers updates a file on branch and no commits on master ):
git checkout master
git merge develop

to merge develop to master (with conflicts - 2 developers update's same file; Automatic merge failed; fix conflicts and then commit the result. ):
git checkout master
git merge develop

to merge develop to master (with conflicts - 2 developers update's updates different file ; Merge made by the 'recursive' strategy. ):
git checkout master
git merge develop


create tag...
git tag 0.1
git tag --list / git tag
git tag -d list


edit and commit one shot for tracked files:
echo master >> mfile ; git commit -am "updated by master"

to edit comment:
git commit --amend -m "updated comments"

set command alias
git config --global alias.lo "log --oneline"
git config --global alias.lod "log --oneline --decorate"
git config --list | grep -i alias
git config --global --unset alias.lo


create a empty branch

git checkout --orphan hotfixes 
( git status ; git branch ; check default branch not selected and git log
fatal: bad default revision 'HEAD')
Switched to a new branch 'hotfixes'

git rm --cached *
rm *

for i in bugfix ; do  touch $i ; git add . ; git commit -m "added $i"; done
git log --oneline ; git branch


list only current branch:
cat .git/HEAD
git rev-parse --abbrev-ref HEAD

create a file:
for i in dfile5 ; do  touch $i ; git add . ; git commit -m "added $i"; done
for i in dfile1 dfile2 dfile3 ; do  touch $i ; git add . ; git commit -m "added $i"; done

------------------------------------------------------------------------------------------------------------------
git tasks:
------------------------------------------------------------------------------------------------------------------

git installation - yum install git

Git-status is used to understand what stage the files in a repository are at.
git status - fatal: Not a git repository (or any of the parent directories): .git

git init - Initialized empty Git repository in /root/soft/gittest/user5/.git/

how will you configure your developers username and email

how to list git configuration
git config --list

what are the 3 phases in git - working dir/staging area/local repo

what is commit and how will you commit a file - The "commit" command is used to save your changes to the local repository.
how will you check your commits - git log
how will you commit tracked files to local repo with single command

what is the purpose of git - The purpose of Git is to manage a project, or a set of files, as they change over time. Git stores this information in a data structure called a repository. A git repository contains, among other things, the following: A set of commit objects.

clean your working dir

copy file from local repo to staging/index area

unstage file

copy file from local repo directly to workspace

how will you clone , push , pull

while pushing you are getting rejected error?

github repo... collabarative access, email notification on commits

branch - create, list, change, rename, create and switch in one go,  merge fast-forward, merge conflicts, skip conflicts, delete local branch, delete remote branch, without merge delete, rebase, merge vs rebase, fetch 
https://medium.com/@haydar_ai/learning-how-to-git-merging-branches-and-resolving-conflict-61652834d4b0
https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase


how to create cmd alias to git command , remove

how to ignore files in git

what is stash memory.. list, stash , unstash, pop, apply, drop, show

what is tag .. list, create, delete, push


------------------------------------------------------------------------------------------------------------------
references:
------------------------------------------------------------------------------------------------------------------

akshata.shetty49@gmail.com
https://github.com/akshatahub6
nation$$$8+18+18+1

https://nvie.com/posts/a-successful-git-branching-model/


------------------------------------------------------------------------------------------------------------------
Yet to Discuss:
------------------------------------------------------------------------------------------------------------------

You need to commit at least one time on master before creating a new branch.

https://career.guru99.com/top-40-interview-questions-on-git/

https://github.com/

git help config
       When reading, the values are read from the system, global and repository local configuration files by default, and options
       --system, --global, --local and --file <filename> can be used to tell the command to read from only that location (see the
       section called “FILES”).

cat ~/.gitconfig
cat .git/config
git config --list

~/.gitconfig --global
.git/config --local
/etc/gitconfig --system
git config --list  --file /tmp/fileconfig


git config --global --edit
git config --local --edit
git config --system --edit 
git config --edit  --file /tmp/fileconfig	

git config --global user.email "sivaprasad.kammara@gmail.com"
git config --global user.name "ksphub"

git config --global --unset-all  user.name
git config --global --unset-all  user.email
git config --global --replace-all user.email "you@example.com"
git config --global --replace-all user.name "Your Name"

[root@ip-172-31-32-89 ksp4]# git config --local --list

core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true

[root@ip-172-31-32-89 ksp4]# git config --global --list

user.email=sivaprasad.kammara@gmail.com
user.name=ksphub
[root@ip-172-31-32-89 ksp4]# git config --system --list
fatal: unable to read config file '/etc/gitconfig': No such file or directory

[root@ip-172-31-32-89 ksp4]# git config --list

user.email=sivaprasad.kammara@gmail.com
user.name=ksphub
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true

[root@ip-172-31-32-89 ksp4]#

git clone https://github.com/ksphub/centralrepo.git
https://github.com/ksphub/centralrepo.git
git push origin master

git log --stat --summary
git help tutorial
git help add/status/config

git remote -v
git remote add origin https://github.com/ksphub/centralrepo.git
git push -u origin master

https://github.com/ksphub/KSPDocs.git


------------------------------------------------------------------------------------------------------------------
practice: https://nvie.com/posts/a-successful-git-branching-model/

mkdir gmodel2 ; cd gmodel2

git status; git init ; git status
git branch ; git log
touch masterfile ; git add masterfile ; git commit -m "added by master"
git tag; git tag 0.1; git tag

git checkout -b develop
touch dfile1 ; git add dfile1 ; git commit -m "added by develop"
touch dfile2 ; git add dfile2 ; git commit -m "added by develop"
git branch feabranch1
git branch feabranch2
for i in dfile3 ; do  touch $i ; git add . ; git commit -m "added by devlop"; done

git checkout feabranch2
for i in newfea2.1 ; do  touch $i ; git add . ; git commit -m "added by feabranch2"; done

git checkout feabranch1
for i in newfea1.1 ; do  touch $i ; git add . ; git commit -m "added by feabranch1"; done
for i in newfea1.2 ; do  touch $i ; git add . ; git commit -m "added by feabranch1"; done

git checkout feabranch2
for i in newfea2.2 ; do  touch $i ; git add . ; git commit -m "added by feabranch2"; done

git checkout develop
git checkout --orphan hotfixes
git rm --cached *
rm -rf *
for i in hotfix ; do  touch $i ; git add . ; git commit -m "added by hotfixes" ; done

git checkout develop
git merge hotfixes

git checkout master
git merge hotfixes
git tag 0.2

git checkout develop
git merge feabranch1

git checkout develop
git checkout -b reabranch
for i in bugfix; do  touch $i ; git add . ; git commit -m "added by reabranch" ; done
git merge --no-ff reabranch

git checkout develop
git merge reabranch

git checkout feabranch2
for i in newfea2.3; do  touch $i ; git add . ; git commit -m "added by feabranch2" ; done

git checkout feabranch1
git merge develop

git checkout reabranch
for i in bugfix1.1; do  touch $i ; git add . ; git commit -m "added by reabranch" ; done
for i in bugfix1.2; do  touch $i ; git add . ; git commit -m "added by reabranch" ; done

git checkout master
git merge reabranch
git tag 1.0

git checkout develop
git merge reabranch

git checkout feabranch1
for i in newfea1.3 ; do  touch $i ; git add . ; git commit -m "added by feabranch1"; done
for i in newfea1.4 ; do  touch $i ; git add . ; git commit -m "added by feabranch1"; done

git checkout develop
git merge feabranch1

git checkout feabranch2
for i in newfea2.4; do  touch $i ; git add . ; git commit -m "added by feabranch2" ; done

git checkout develop
git merge feabranch2

git checkout reabranch
git merge develop

git checkout master
git merge reabranch

------------------------------------------------------------------------------------------------------------------
git show-branch -a \
| grep '\*' \
| grep -v `git rev-parse --abbrev-ref HEAD` \
| head -n1 \
| sed 's/.*\[\(.*\)\].*/\1/' \
| sed 's/[\^~].*//'

git log --graph --decorate --simplify-by-decoration
git log --decorate --graph --oneline


------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------

